commit 5c3f1e46b61db591ea61d560ee51535286afa1a4
Author: Brandon Black <bblack@wikimedia.org>
Date:   Sat Nov 12 15:26:17 2016 +0000

    increase DEFAULT_BUFFER_SIZE from 4K to 8K
    
    The historical SSLeay value was 1K.  This was increased to 4K in
    for release 0.9.6b back in 2001.  Today, it is not uncommon for
    server handshake responses to exceed 4K given intermediate chain
    certs and OCSP stapling, but typical sizes are still within 8K.
    
    When the server response exceeds the buffer size, the TLS
    handshake suffers an extra RTT of latency penalty.  It is also
    difficult (and shouldn't be necessary given how common this is) to
    correct this manually using the normal APIs for a server
    application.
    
    There may have also been some rationale around TCP IW3 limits in
    setting the previous 4K size, but modern servers are typically
    IW10, which allows the server to initially send 8K easily.  IW10
    allows for at most 14600 in the ideal case, but I wouldn't expect
    it to commonly be any less than 12200 (IPv6 minimum MTU case).

diff --git a/crypto/bio/bf_buff.c b/crypto/bio/bf_buff.c
index 7a73095..2d39632 100644
--- a/crypto/bio/bf_buff.c
+++ b/crypto/bio/bf_buff.c
@@ -20,7 +20,7 @@ static long buffer_ctrl(BIO *h, int cmd, long arg1, void *arg2);
 static int buffer_new(BIO *h);
 static int buffer_free(BIO *data);
 static long buffer_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);
-#define DEFAULT_BUFFER_SIZE     4096
+#define DEFAULT_BUFFER_SIZE     8192
 
 static const BIO_METHOD methods_buffer = {
     BIO_TYPE_BUFFER,
diff --git a/doc/man3/BIO_f_buffer.pod b/doc/man3/BIO_f_buffer.pod
index 8ceaaa3..00f5483 100644
--- a/doc/crypto/BIO_f_buffer.pod
+++ b/doc/crypto/BIO_f_buffer.pod
@@ -37,7 +37,7 @@ BIO_get_buffer_num_lines() returns the number of lines currently buffered.
 
 BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size()
 set the read, write or both read and write buffer sizes to B<size>. The initial
-buffer size is DEFAULT_BUFFER_SIZE, currently 4096. Any attempt to reduce the
+buffer size is DEFAULT_BUFFER_SIZE, currently 8192. Any attempt to reduce the
 buffer size below DEFAULT_BUFFER_SIZE is ignored. Any buffered data is cleared
 when the buffer is resized.
 
